# 기본 정책
이 프로젝트에서는 다음 원칙을 따르십시오.
- 코드는 명확하고 읽기 쉽고 충분히 주석 처리되어야합니다.
- DRY 원칙을 준수하고 동일한 로직을 여러 위치에 구현하지 마십시오.
- 일관된 명명 규칙을 사용하십시오.
- 작고 독립적인 함수와 구성 요소를 만듭니다.
- 오류 처리를 철저히하십시오.
# 파일 배치
- 소스 코드를 src / 디렉토리에 넣으십시오.
- 테스트 파일은 tests/ 디렉토리에 배치하십시오
- 문서를 docs/ 디렉토리에 넣으십시오.
- 구성 요소는 src/components/ 디렉토리에 있어야 합니다.
- 유틸리티 함수를 src/utils/ 디렉토리에 넣으십시오.
# 명명 규칙
- 변수 이름과 함수 이름에는 캬멜 케이스(예: myVariable)를 사용하십시오.
- 클래스명과 컴퍼넌트명에는 파스칼 케이스(예: MyComponent)를 사용해 주세요
- 상수에는 대문자 뱀 케이스(예: MAX_COUNT)를 사용합니다.
- 파일명은 그 내용을 명확하게 표현해야 합니다.
# 코딩 스타일
- 들여쓰기에는 두 개의 공간을 사용하십시오.
- 행 길이는 80자를 초과하지 않아야합니다.
- 함수의 길이가 50행을 넘지 않아야 합니다.
- 원하지 않는 주석 처리된 코드를 남기지 마십시오.
- 복잡한 처리에 적절한 코멘트를 붙이십시오.

# React/Next.js 코딩 규칙
# 파일 구조
- React 컴포넌트는 src/components/ 디렉토리에 위치한다
- 페이지 구성 요소는 src/pages/ 디렉토리에 넣습니다 (Next.js의 경우)
- 커스텀 훅은 src/hooks/ 디렉토리에 배치해,use 접두사를 사용한다
- 유틸리티 함수는 src/utils/ 디렉토리에 넣습니다.
- 형 정의는 src/types/ 디렉토리에 배치한다 (TypeScript의 경우)
- API 로직은 src/api/ 디렉토리에 위치한다
- 상태 관리 로직은 src/store/ 디렉토리에 위치한다
# 구성 요소 설계
- 함수 컴포넌트를 사용하고 클래스 컴포넌트를 피합니다.
- 복잡한 구성요소는 더 작은 하위 구성요소로 분할
- 프레젠테이션 구성 요소와 컨테이너 구성 요소 분리
- 컴퍼넌트의 props에는 반드시 형태 정의를 실시한다 (TypeScript)
- 필수 prop에 기본값을 설정하거나 명시적으로 필수로 표시
# 성능 최적화
- 메모화를 적절히 사용 (React.memo, useMemo, useCallback)
- 큰 목록에는 가상화 사용 (react-window, react-virtualized)
- 이미지 최적화 (Next.js의 이미지 구성 요소 등)
- 조건부 렌더링을 적절히 사용
- useEffect의 종속 배열을 정확하게 지정
# 스타일링
- 컴포넌트 특정 스타일은 같은 폴더에 배치
- Tailwind CSS를 사용하는 경우 가능한 한 기존 유틸리티 클래스 사용
- CSS-in-JS를 사용하는 경우 스타일을 구성 요소 내에서 정의합니다.
- 글로벌 스타일은 최소화
# 상태 관리
- 로컬 상태에 useState 사용
- 복잡한 상태 관리에는 useReducer 사용
- 글로벌 상태에 적절한 상태 관리 라이브러리를 사용
- 컨텍스트 API를 남용하지 않음
# 접근성
- 적절한 aria 속성과 시맨틱 HTML 사용
- 키보드 네비게이션 지원
- 대비비 고려
- 이미지에 적절한 alt 속성을 설정합니다.
# 보안
- 사용자 입력은 위생
- 안전하지 않은 innerHTML 사용을 피하십시오.
- 기밀 정보나 API 키를 클라이언트 측에 공개하지 않음
- Cross-Site Scripting (XSS) 대책 구현

# Node.js/Express 백엔드 개발 가이드라인
# 프로젝트 구조
- 소스 코드는 src/ 디렉토리에 넣습니다.
- 루트 핸들러는 src/routes/ 디렉토리에 위치한다
- 미들웨어는 src/middleware/ 디렉토리에 위치한다
- 모델은 src/models/ 디렉토리에 배치한다
- 컨트롤러는 src/controllers/ 디렉토리에 넣습니다.
- 서비스는 src/services/ 디렉토리에 위치한다
- 유틸리티 함수는 src/utils/ 디렉토리에 넣습니다.
- 구성 파일은 src/config/ 디렉토리에 넣습니다.
# 아키텍처 패턴
- 라우터 → 컨트롤러 → 서비스 → 모델의 계층화 된 아키텍처 사용
- 각 층의 책임을 명확하게 분리
- 서비스 계층에서 비즈니스 로직을 구현하고 컨트롤러는 요청/응답 처리만 수행합니
다.
- 저장소 패턴을 사용하여 데이터 액세스를 추상화
# 오류 처리
- 중앙 집중식 오류 처리 미들웨어 사용
- 적절한 HTTP 상태 코드 사용
- 오류 메시지는 일관성을 부여합니다.
- 기밀 정보를 오류 메시지에 포함하지 않음
- 비동기 오류 처리에는 try/catch 또는 Promise chaining 사용
- 맞춤 오류 클래스를 사용하여 자세한 오류 정보 제공
# 보안
- 입력 검증을 철저히 한다(Joi, express-validator 등)
- 크로스 사이트 스크립팅(XSS) 공격 대책 구현
- SQL 주입 대책으로 매개 변수화된 쿼리 사용
- CSRF 대책 구현
- HTTP 보안 헤더 설정(helmet.js 등)
- 기밀 정보(API 키 등)는 코드에 하드 코딩하지 않습니다.
- 속도 제한을 구현하여 DoS 공격 방지
# 성능
- 적절한 인덱스를 데이터베이스로 설정
- 장시간 실행되는 처리는 비동기/백그라운드 작업에 위양
- 캐시를 효과적으로 활용
- 데이터베이스 쿼리 최적화
- 필요에 따라 수평 스케일링을 고려한 설계로 한다
# API 디자인
- RESTful 원칙에 따라
- 일관된 명명 규칙 사용
- 버전 관리 구현
- HATEOAS 원칙 검토
- 적절한 HTTP 메소드와 상태 코드 사용
- 응답 형식 표준화