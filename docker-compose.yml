version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: algorithm-postgres
    environment:
      POSTGRES_DB: algorithm_contest
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - algorithm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: algorithm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - algorithm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 백엔드 서버
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: algorithm-backend
    environment:
      # 데이터베이스 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: algorithm_contest
      
      # Redis 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT 설정
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      
      # 서버 설정
      PORT: 3001
      NODE_ENV: development
      
      # 채점 시스템 설정
      JUDGE_SERVICE_URL: http://judge:3002
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - algorithm-network
    restart: unless-stopped

  # 채점 서비스
  judge:
    build:
      context: ./backend/docker-judge
      dockerfile: Dockerfile
    container_name: algorithm-judge
    environment:
      PORT: 3002
      NODE_ENV: development
    ports:
      - "3002:3002"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - algorithm-network
    restart: unless-stopped

  # 프론트엔드 (선택사항)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: algorithm-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - algorithm-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  algorithm-network:
    driver: bridge 